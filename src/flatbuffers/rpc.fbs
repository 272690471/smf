namespace smf.fbs.rpc;

/// \brief: headers that are stored in an int
/// so they need to be inclusive. That is, you can turn on
/// many flags at the same time, i.e.: enable crc32 checks and
/// have the payload be zlib compressed.
///
enum Flags:uint (bit_flags) {
  /// \brief MUST BE THE FIRST ONE so that we can crc32
  /// check the compressed payload if enabled. After decompression we can verify
  /// the payload with the flatbuffers Verifyer
  CHECKSUM,

  /// uses flatbuffers schema verification
  VERIFY_SCHEMA,
  /// \brief the payload is compressed using -lsnappy
  SNAPPY
}

/// \brief: header parsed by rpc engine
/// must be sizeof()'able
/// that is, must be a struct in fbs language
///
struct Header {
  size: uint;
  flags: Flags = 0;
  /// \brief at the moment we use xxhash_64 bit version
  /// and truncate it with static_cast<uint32_t>(xxhash)
  checksum: uint;
}

/// \brief used for extra headers, ala HTTP
/// The use case for the core is to support
/// zipkin/google-Dapper style tracing
table DynamicHeader {
  /// alows for binary search lookup
  /// use with CreateVectorOfSortedTables<> instead of the CreateVector
  key: string (key);
  /// allows full embedding of other flatbuffers structs, such as tracing
  /// extra modules, sampling, etc
  value: [ubyte];
}

/// \brief: Payload needs to be a table because internally
/// we actually don't hold a pointer to the RPC table, we
/// construct the header from the socket and then construct
/// the payload from the socket. So we need a fbs table to wrap
/// the byte array of the body of the request.
///
/// The idea here is that the `body' will actually be another flatbuffer
/// or any other protocol, so a byte array is the lowest abstraction
///
table Payload {
  /// \brief used for sending and receiving, read carefully.
  ///
  /// Receiving:
  ///
  /// Uses the same as HTTP status - on the receiving end
  /// We don't want to pay the cost of parsing a header
  /// On every response as does HTTP. std::to_string and std::stol()
  /// are needlesly expensive
  ///
  /// Sending:
  ///
  /// Used with the xor hash of Service::ID() ^ Service::Method::ID()
  /// This is how the server multiplexer figures out what function pointer
  /// to call
  ///
  meta: uint;

  /// Known Headers
  /// x-routing: consistent-hash
  ///     sends the consistent hashing based on the source addr to the
  ///     destination core - useful for locality
  ///
  /// x-routing: broadcast
  ///     spawns a seastar::map_reduce style on a method - useful for shutdown
  ///
  /// x-routing: round-robin
  ///     sends the request to the seastar::smp_send(count % smp_cores)
  ///
  /// x-verify-schema: 1
  ///    \code
  ///    `Verifier(buf, len, 64 /* max depth */, 1000000, /* max tables */)`
  ///    \endcode
  ///    of flatbuffers to verify if the contents of the payload are valid.
  ///
  dynamic_headers: [DynamicHeader];
  body: [ubyte];
}

root_type Payload;
